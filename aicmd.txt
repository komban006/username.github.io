1) Implement backtracking for constraint satisfaction problems (4-Queen). 

N = 4

def print_board(board):
    for row in board:
        print(" ".join("Q" if col else "." for col in row))
    print()

def is_safe(board, row, col):
    # Check column
    for i in range(row):
        if board[i][col]:
            return False

    # Check upper-left diagonal
    i, j = row, col
    while i >= 0 and j >= 0:
        if board[i][j]:
            return False
        i -= 1
        j -= 1

    # Check upper-right diagonal
    i, j = row, col
    while i >= 0 and j < N:
        if board[i][j]:
            return False
        i -= 1
        j += 1

    return True

def solve(board, row):
    if row == N:
        print_board(board)
        return True

    result = False
    for col in range(N):
        if is_safe(board, row, col):
            board[row][col] = 1
            result = solve(board, row + 1) or result
            board[row][col] = 0  # Backtrack

    return result

# Initialize the board
board = [[0 for _ in range(N)] for _ in range(N)]

# Start solving
solve(board, 0)

-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------

2)Simulate state transitions and search for optimal path (8-Puzzle). 

import heapq

goal_state = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 0]
]

moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]  # Up, Down, Left, Right

class Node:
    def __init__(self, state, parent=None, move="", depth=0):
        self.state = state
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = self.depth + self.heuristic()

    def __lt__(self, other):
        return self.cost < other.cost

    def heuristic(self):
        dist = 0
        for i in range(3):
            for j in range(3):
                val = self.state[i][j]
                if val != 0:
                    goal_i, goal_j = (val - 1) // 3, (val - 1) % 3
                    dist += abs(i - goal_i) + abs(j - goal_j)
        return dist

    def find_zero(self):
        for i in range(3):
            for j in range(3):
                if self.state[i][j] == 0:
                    return i, j

    def generate_successors(self):
        successors = []
        x, y = self.find_zero()
        for dx, dy in moves:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                new_state = [row[:] for row in self.state]
                new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
                move = f"Move {new_state[x][y]} to ({x},{y})"
                successors.append(Node(new_state, self, move, self.depth + 1))
        return successors

def is_goal(state):
    return state == goal_state

def a_star(start_state):
    start = Node(start_state)
    open_list = []
    heapq.heappush(open_list, start)
    visited = set()

    while open_list:
        current = heapq.heappop(open_list)
        state_tuple = tuple(tuple(row) for row in current.state)

        if state_tuple in visited:
            continue
        visited.add(state_tuple)

        if is_goal(current.state):
            path = []
            while current:
                path.append(current)
                current = current.parent
            return path[::-1]

        for neighbor in current.generate_successors():
            heapq.heappush(open_list, neighbor)

    return None

def print_solution(path):
    for step in path:
        print(step.move)
        for row in step.state:
            print(row)
        print()

# 🔁 Change the initial state here
initial_state = [
    [1, 2, 3],
    [4, 0, 6],
    [7, 5, 8]
]

path = a_star(initial_state)

if path:
    print("✅ Solution found in", len(path) - 1, "moves:\n")
    print_solution(path)
else:
    print("❌ No solution found.")

-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------


3)Apply game logic with winning conditions (Tic-Tac-Toe).

def print_board(board):
    print("\nCurrent Board:")
    for row in board:
        print(" | ".join(row))
        print("-" * 5)
    print()

def check_winner(board, player):
    # Check rows, columns, and diagonals
    for i in range(3):
        if all(cell == player for cell in board[i]) or all(row[i] == player for row in board):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)):
        return True
    return False

def is_draw(board):
    return all(cell != " " for row in board for cell in row)

def tic_tac_toe():
    board = [[" " for _ in range(3)] for _ in range(3)]
    current_player = "X"

    print("🎮 Welcome to Tic-Tac-Toe!")
    print_board(board)

    while True:
        try:
            row = int(input(f"Player {current_player}, enter row (0-2): "))
            col = int(input(f"Player {current_player}, enter col (0-2): "))
        except ValueError:
            print("❌ Invalid input. Please enter numbers between 0 and 2.")
            continue

        if 0 <= row < 3 and 0 <= col < 3:
            if board[row][col] == " ":
                board[row][col] = current_player
                print_board(board)

                if check_winner(board, current_player):
                    print(f"🏆 Player {current_player} wins!")
                    break
                elif is_draw(board):
                    print("🤝 It's a draw!")
                    break
                current_player = "O" if current_player == "X" else "X"
            else:
                print("⚠️ Cell already taken! Try again.")
        else:
            print("❌ Invalid cell position. Try again.")

# Run the game
tic_tac_toe()

-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------

4)Min-Max alpha beta

import math

# Initialize board
board = [[" " for _ in range(3)] for _ in range(3)]

def print_board():
    print("\nCurrent board:")
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(b, player):
    for i in range(3):
        if all(b[i][j] == player for j in range(3)) or all(b[j][i] == player for j in range(3)):
            return True
    if all(b[i][i] == player for i in range(3)) or all(b[i][2 - i] == player for i in range(3)):
        return True
    return False

def is_draw():
    return all(cell != " " for row in board for cell in row)

def minimax(b, depth, is_maximizing, alpha, beta):
    if check_winner(b, "O"):
        return 1
    elif check_winner(b, "X"):
        return -1
    elif is_draw():
        return 0

    if is_maximizing:
        best_score = -math.inf
        for i in range(3):
            for j in range(3):
                if b[i][j] == " ":
                    b[i][j] = "O"
                    score = minimax(b, depth + 1, False, alpha, beta)
                    b[i][j] = " "
                    best_score = max(best_score, score)
                    alpha = max(alpha, score)
                    if beta <= alpha:
                        break
        return best_score
    else:
        best_score = math.inf
        for i in range(3):
            for j in range(3):
                if b[i][j] == " ":
                    b[i][j] = "X"
                    score = minimax(b, depth + 1, True, alpha, beta)
                    b[i][j] = " "
                    best_score = min(best_score, score)
                    beta = min(beta, score)
                    if beta <= alpha:
                        break
        return best_score

def best_move():
    best_score = -math.inf
    move = (-1, -1)
    for i in range(3):
        for j in range(3):
            if board[i][j] == " ":
                board[i][j] = "O"
                score = minimax(board, 0, False, -math.inf, math.inf)
                board[i][j] = " "
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

def play():
    print("🎮 Welcome to Tic-Tac-Toe (You = X, AI = O)")
    print_board()

    while True:
        # Player move
        try:
            row = int(input("Enter row (0-2): "))
            col = int(input("Enter col (0-2): "))
        except ValueError:
            print("Invalid input. Try again.")
            continue

        if 0 <= row < 3 and 0 <= col < 3 and board[row][col] == " ":
            board[row][col] = "X"
        else:
            print("Invalid move. Try again.")
            continue

        print_board()
        if check_winner(board, "X"):
            print("🏆 You win!")
            break
        if is_draw():
            print("🤝 It's a draw!")
            break

        # AI move
        ai_row, ai_col = best_move()
        board[ai_row][ai_col] = "O"
        print("🤖 AI moved:")
        print_board()

        if check_winner(board, "O"):
            print("😔 AI wins!")
            break
        if is_draw():
            print("🤝 It's a draw!")
            break

# Run the game
play()

-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------

5)Regression

import numpy as np
from sklearn.linear_model import LinearRegression
import matplotlib.pyplot as plt

# Sample data (X = input feature, y = target/output)
X = np.array([[1], [2], [3], [4], [5]])   # independent variable
y = np.array([3, 4, 2, 5, 6])             # dependent variable

# Create and train the model
model = LinearRegression()
model.fit(X, y)

# Predict
predictions = model.predict(X)

# Display results
print("Slope (coefficient):", model.coef_[0])
print("Intercept:", model.intercept_)

# Plot
plt.scatter(X, y, color='blue', label='Actual data')
plt.plot(X, predictions, color='red', label='Regression line')
plt.xlabel("X")
plt.ylabel("y")
plt.title("Simple Linear Regression")
plt.legend()
plt.show()

-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------

6)KNN

from sklearn.neighbors import KNeighborsClassifier
from sklearn.model_selection import train_test_split
from sklearn.datasets import load_iris
from sklearn.metrics import accuracy_score

# Load dataset (Iris dataset: 150 samples, 3 classes)
iris = load_iris()
X = iris.data       # features (sepal & petal length/width)
y = iris.target     # labels (0 = Setosa, 1 = Versicolor, 2 = Virginica)

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create KNN model with k=3
knn = KNeighborsClassifier(n_neighbors=3)
knn.fit(X_train, y_train)

# Predict and evaluate
y_pred = knn.predict(X_test)
accuracy = accuracy_score(y_test, y_pred)

print("Predictions:", y_pred)
print("Actual     :", y_test)
print("✅ Accuracy:", accuracy)

-----------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------


7.DT


from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

# Sample dataset: [height, weight, shoe_size]
X = [
    [170, 65, 8],
    [180, 80, 10],
    [160, 50, 6],
    [175, 70, 9],
    [185, 85, 11],
    [155, 45, 5]
]

# Labels: 0 = Female, 1 = Male
y = [0, 1, 0, 1, 1, 0]

# Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=1)

# Initialize Decision Tree Classifier
clf = DecisionTreeClassifier(criterion='entropy')  # You can also use 'gini'

# Train the classifier
clf.fit(X_train, y_train)

# Predict using test set
y_pred = clf.predict(X_test)

# Print predictions and accuracy
print("Predictions:", y_pred)
print("Actual:", y_test)
print("Accuracy:", accuracy_score(y_test, y_pred))


-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------

8.Develop a program to implement the following uninformed search strategies inpython
– Best First Search
– A*Algorithm


import heapq

# Define the graph
graph = {
    'Start': [('A', 1), ('B', 4)],
    'A': [('Goal', 3)],
    'B': [('Goal', 1)],
    'Goal': []
}

# Heuristic values
heuristics = {
    'Start': 5,
    'A': 2,
    'B': 1,
    'Goal': 0
}

# ------------------ Best First Search ------------------
def best_first_search(start, goal):
    visited = set()
    queue = [(heuristics[start], start)]  # (heuristic, node)

    print("\nBest First Search Path:")

    while queue:
        _, node = heapq.heappop(queue)
        print(f"Visited: {node}")
        if node == goal:
            print("Goal Reached!")
            return
        if node not in visited:
            visited.add(node)
            for neighbor, _ in graph[node]:
                if neighbor not in visited:
                    heapq.heappush(queue, (heuristics[neighbor], neighbor))

# ------------------ A* Algorithm ------------------
def a_star_search(start, goal):
    visited = set()
    queue = [(heuristics[start], 0, start)]  # (f = g + h, g, node)

    print("\nA* Search Path:")

    while queue:
        f, g, node = heapq.heappop(queue)
        print(f"Visited: {node} (f={f}, g={g}, h={heuristics[node]})")
        if node == goal:
            print("Goal Reached!")
            return
        if node not in visited:
            visited.add(node)
            for neighbor, cost in graph[node]:
                if neighbor not in visited:
                    new_g = g + cost
                    new_f = new_g + heuristics[neighbor]
                    heapq.heappush(queue, (new_f, new_g, neighbor))

# ------------------ Run the Searches ------------------
best_first_search('Start', 'Goal')
a_star_search('Start', 'Goal')

------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------------------------------


9.BFS and DFS



from collections import deque

# Sample graph
graph = {
    'A': ['B', 'C'],
    'B': ['D'],
    'C': ['E'],
    'D': [],
    'E': []
}

# ----------- BFS Implementation -----------
def bfs(start_node):
    visited = set()
    queue = deque([start_node])

    print("\nBFS Traversal:")
    while queue:
        node = queue.popleft()
        if node not in visited:
            print(node, end=' ')
            visited.add(node)
            queue.extend(graph[node])

# ----------- DFS Implementation -----------
def dfs(start_node, visited=None):
    if visited is None:
        visited = set()

    if start_node not in visited:
        print(start_node, end=' ')
        visited.add(start_node)
        for neighbor in graph[start_node]:
            dfs(neighbor, visited)

# Run both algorithms
bfs('A')
print("\n\nDFS Traversal:")
dfs('A')



--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------



